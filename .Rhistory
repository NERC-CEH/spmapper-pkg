COGU_sampled_path <- system.file("extdata",
"COGU.sampled.params.csv",
package = "spmapper")
# Read the CSV file
COGU_sampled_spmapper <- read.csv(COGU_sampled_path)
usethis::use_data(COGU_sampled_spmapper, overwrite = TRUE)
sinew::makeOxygen(COGU_sampled_spmapper)
## load BLKI.sampled.params.csv ##
###############################################
# get full path
BLKI_sampled_path <- system.file("extdata",
"BLKI.sampled.params.csv",
package = "spmapper")
# Read the CSV file
BLKI_sampled_spmapper <- read.csv(BLKI_sampled_path)
usethis::use_data(BLKI_sampled_spmapper, overwrite = TRUE)
sinew::makeOxygen(BLKI_sampled_spmapper)
## prepare `FAME_UD_standardised_RAZO.tif` dataset raster
FAME_UD_standardised_RAZO_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_RAZO.tif",
package = "spmapper"))
FAME_UD_standardised_RAZO_m <- terra::as.matrix(FAME_UD_standardised_RAZO_r)
terra::plot(FAME_UD_standardised_RAZO_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_RAZO_r)
ncols <- ncol(FAME_UD_standardised_RAZO_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_RAZO_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_RAZO <- list(matrix = FAME_UD_standardised_RAZO_m,
metadata = FAME_UD_standardised_RAZO_metadata)
usethis::use_data(FAME_UD_standardised_RAZO, overwrite = TRUE)
sinew::makeOxygen(FAME_UD_standardised_RAZO)
str(FAME_UD_standardised_RAZO)
## prepare `FAME_UD_standardised_COGU.tif` dataset raster
FAME_UD_standardised_COGU_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_COGU.tif",
package = "spmapper"))
FAME_UD_standardised_COGU_m <- terra::as.matrix(FAME_UD_standardised_COGU_r)
terra::plot(FAME_UD_standardised_COGU_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_COGU_r)
ncols <- ncol(FAME_UD_standardised_COGU_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_COGU_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_COGU_r)
FAME_UD_standardised_COGU_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_COGU <- list(matrix = FAME_UD_standardised_COGU_m,
metadata = FAME_UD_standardised_COGU_metadata)
usethis::use_data(FAME_UD_standardised_COGU, overwrite = TRUE)
str(FAME_UD_standardised_COGU)
## prepare `FAME_UD_standardised_BLKI.tif` dataset raster
FAME_UD_standardised_BLKI_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_BLKI.tif",
package = "spmapper"))
FAME_UD_standardised_BLKI_m <- terra::as.matrix(FAME_UD_standardised_BLKI_r)
terra::plot(FAME_UD_standardised_BLKI_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_BLKI_r)
ncols <- ncol(FAME_UD_standardised_BLKI_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_BLKI_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_BLKI_r)
FAME_UD_standardised_BLKI_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_BLKI <- list(matrix = FAME_UD_standardised_BLKI_m,
metadata = FAME_UD_standardised_BLKI_metadata)
usethis::use_data(FAME_UD_standardised_BLKI, overwrite = TRUE)
str(FAME_UD_standardised_BLKI)
## load fame_population_ests.csv ##
###############################################
# get full path
fame_population_path <- system.file("extdata",
"fame_population_ests.csv",
package = "spmapper")
# Read the CSV file
fame_population_spmapper <- read.csv(fame_population_path)
usethis::use_data(fame_population_spmapper, overwrite = TRUE)
sinew::makeOxygen(fame_population_spmapper)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package
devtools::check()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
warnings()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
## load Seabird_energetics_pars_spmapper.csv ##
###############################################
# get full path
seabird_energetics_path <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
# Read the CSV file
Seabird_energetics_pars_spmapper <- read.csv(seabird_energetics_path)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
str(Seabird_energetics_pars_spmapper)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
# check that the function works by running ?spmapper for example
?spmapper
?fn.tot.prey
spmapper()
#####################################
# final checks of package
devtools::check()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package
devtools::check()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# test package installation from github
devtools::install_github("NERC-CEH/spmapper-pkg")
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
<code>spmapper</code> is an R package spatial planning tool to indicate the foraging value of marine areas to breeding seabirds.
load_all()
devtools::load_all()
usethis::use_test("functions_spmapper")
test_that("spmapper works", {
# Define a mock footprint polygon
fppolys <- sf::st_as_sf(data.frame(
id = 1,
geometry = sf::st_sfc(sf::st_polygon(list(rbind(c(-10, -10), c(10, -10), c(10, 10), c(-10, 10), c(-10, -10)))))
))
# Call the spmapper function with test parameters
result <- spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = system.file("extdata", package = "spmapper"))
# Check if the result is a list
if (!is.list(result)) {
stop("spmapper did not return a list as expected.")
}
# Check if required elements are present in the result
required_elements <- c("spname", "popscen", "energypars_base_est", "energypars_base_sim", "udmap", "popsize", "fp_ud_overlap", "nbirds_in_fp", "onebird_prey_kg_est", "onebird_prey_kg_sim", "allbirds_prey_est", "allbirds_prey_sim")
if (!all(required_elements %in% names(result))) {
stop("spmapper result is missing some required elements.")
}
message("spmapper test passed successfully!")
}
)
library(usethis)
library(testthat)
test_that("spmapper works", {
# Define a mock footprint polygon
fppolys <- sf::st_as_sf(data.frame(
id = 1,
geometry = sf::st_sfc(sf::st_polygon(list(rbind(c(-10, -10), c(10, -10), c(10, 10), c(-10, 10), c(-10, -10)))))
))
# Call the spmapper function with test parameters
result <- spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = system.file("extdata", package = "spmapper"))
# Check if the result is a list
if (!is.list(result)) {
stop("spmapper did not return a list as expected.")
}
# Check if required elements are present in the result
required_elements <- c("spname", "popscen", "energypars_base_est", "energypars_base_sim", "udmap", "popsize", "fp_ud_overlap", "nbirds_in_fp", "onebird_prey_kg_est", "onebird_prey_kg_sim", "allbirds_prey_est", "allbirds_prey_sim")
if (!all(required_elements %in% names(result))) {
stop("spmapper result is missing some required elements.")
}
message("spmapper test passed successfully!")
}
)
test_that("spmapper works", {
# Define a mock footprint polygon
fppolys <- sf::st_as_sf(data.frame(
id = 1,
# set crs
terra::crs = '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0',
test_that("spmapper works", {
# Define a mock footprint polygon
fppolys <- sf::st_as_sf(data.frame(
id = 1,
# define crs and geographical projection
name = "Test Footprint",
geometry = sf::st_sfc(sf::st_polygon(list(rbind(c(-10, -10),
c(10, -10),
c(10, 10),
c(-10, 10),
c(-10, -10)))))
))
# Call the spmapper function with test parameters
result <- spmapper(spname = "Guillemot",
fppolys = fppolys,
popscen = "baseline",
tooldir = system.file("extdata", package = "spmapper"))
# Check if the result is a list
if (!is.list(result)) {
stop("spmapper did not return a list as expected.")
}
# Check if required elements are present in the result
required_elements <- c("spname",
"popscen",
"energypars_base_est",
"energypars_base_sim",
"udmap", "popsize",
"fp_ud_overlap",
"nbirds_in_fp",
"onebird_prey_kg_est",
"onebird_prey_kg_sim",
"allbirds_prey_est",
"allbirds_prey_sim")
if (!all(required_elements %in% names(result))) {
stop("spmapper result is missing some required elements.")
}
message("spmapper test passed successfully!")
}
)
test_that("spmapper works", {
# Define a mock footprint polygon
fppolys <- sf::st_as_sf(data.frame(
id = 1,
geometry = sf::st_sfc(crs = 4326,(sf::st_polygon(list(rbind(c(-10, -10),
c(10, -10),
c(10, 10),
c(-10, 10),
c(-10, -10)))))
))
# Call the spmapper function with test parameters
result <- spmapper(spname = "Guillemot",
test_that("spmapper works", {
# Define a mock footprint polygon
fppolys <- sf::st_as_sf(data.frame(
id = 1,
geometry = sf::st_sfc((sf::st_polygon(list(rbind(c(-10, -10),
c(10, -10),
c(10, 10),
c(-10, 10),
c(-10, -10),
crs = 4326))))
))
# Call the spmapper function with test parameters
result <- spmapper(spname = "Guillemot",
test_that("spmapper works", {
# Define a mock footprint polygon
fppolys <- sf::st_as_sf(data.frame(
id = 1,
geometry = sf::st_sfc((sf::st_polygon(list(rbind(c(-10, -10),
c(10, -10),
c(10, 10),
c(-10, 10),
c(-10, -10)
)))
crs = 4326)
test_that("spmapper works", {
# Define a mock footprint polygon
fppolys <- sf::st_as_sf(data.frame(
id = 1,
geometry = sf::st_sfc((sf::st_polygon(list(rbind(c(-10, -10),
c(10, -10),
c(10, 10),
c(-10, 10),
c(-10, -10)
))),
# test overage of the whole package
devtools::test_coverage()
#t roughly simulates what happens when a package is installed and loaded with library
devtools::load_all()
# test overage of the whole package
devtools::test_coverage()
#####################################
# final checks of package
devtools::check()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
# check that the function works by running ?spmapper for example
?spmapper
?fn.tot.prey
#####################################
# final checks of package
devtools::check()
#####################################
# final checks of package
devtools::check()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package
devtools::check()
# if pkg is corrupted unlink it
unlink("C:/Users/clacap/AppData/Local/R/win-library/4.4/ecowings", recursive = TRUE, force = TRUE)
# if pkg is corrupted unlink it
unlink("C:/Users/clacap/AppData/Local/R/win-library/4.4/spmapper", recursive = TRUE, force = TRUE)
# or manually remove it by browsing to it
# clean
devtools::clean_dll()
# if ready, install the package in your R system library
devtools::install()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package
devtools::check()
