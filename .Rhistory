devtools::document()
usethis::use_vignette("introduction")
devtools::install()
library(ecowings)
?spmapper
knit_with_parameters("//nercbuctdb/pcusers1/clacap/ecowings/vignettes/introduction.Rmd")
devtools::install()
library(ecowings)
fppolys <- sf::st_read(system.file("demo", package = "ecowings"))
fppolys <- fppolys[c(112,116),] ## NnG and Berwick Bank
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
library(ecowings)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper")
tooldir <- file.path("R", package = "ecowings")
system.file("R", "functions_preymodel.R", package = "ecowings")
system.file("R", "functions_spmapper.R", package = "ecowings")
system.file("R", "functions_fpudoverlap.R", package = "ecowings")
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
devtools::install()
devtools::install()
unlink("C:/Users/clacap/AppData/Local/R/win-library/4.4/ecowings", recursive = TRUE, force = TRUE)
devtools::clean_dll()
devtools::install()
devtools::install()
library(ecowings)
devtools::build()
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(ecowings)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper")
tooldir <- file.path("R", package = "ecowings")
system.file("R", "functions_preymodel.R", package = "ecowings")
system.file("R", "functions_spmapper.R", package = "ecowings")
system.file("R", "functions_fpudoverlap.R", package = "ecowings")
# Chunk 3
fppolys <- sf::st_read(system.file("demo", package = "ecowings"))
fppolys <- fppolys[c(112,116),] ## NnG and Berwick Bank
# Chunk 4
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_cogu <- spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_razo <- spmapper(spname = "Razorbill", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
# Chunk 5
par(mfrow=c(2,2))
plot(out_kitt$udmap, main="Kittiwake")
plot(out_cogu$udmap, main="Guillemot")
plot(out_razo$udmap, main="Razorbill")
# Chunk 6
par(mfrow=c(2,2))
hist(out_kitt$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Kittiwake")
lines(rep(out_kitt$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_cogu$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Guillemot")
lines(rep(out_cogu$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_razo$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Razorbill")
lines(rep(out_razo$allbirds_prey_est,2),c(0,10000),lwd=2)
# Chunk 7
tab_kitt <- data.frame(
Species = "Kittiwake",
Estimate = out_kitt$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_kitt$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_kitt$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_kitt$allbirds_prey_sim, 0.975)))
tab_cogu <- data.frame(
Species = "Guillemot",
Estimate = out_cogu$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_cogu$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_cogu$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_cogu$allbirds_prey_sim, 0.975)))
tab_razo <- data.frame(
Species = "Razorbill",
Estimate = out_razo$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_razo$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_razo$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_razo$allbirds_prey_sim, 0.975)))
kable(rbind(tab_kitt, tab_cogu, tab_razo))
# Chunk 8
spmapper(spname = "kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
# Chunk 1
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# Chunk 2: setup
library(ecowings)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper")
tooldir <- file.path("R", package = "ecowings")
system.file("R", "functions_preymodel.R", package = "ecowings")
system.file("R", "functions_spmapper.R", package = "ecowings")
system.file("R", "functions_fpudoverlap.R", package = "ecowings")
# Chunk 3
fppolys <- sf::st_read(system.file("demo", package = "ecowings"))
fppolys <- fppolys[c(112,116),] ## NnG and Berwick Bank
# Chunk 4
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_cogu <- spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_razo <- spmapper(spname = "Razorbill", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
# Chunk 5
par(mfrow=c(2,2))
plot(out_kitt$udmap, main="Kittiwake")
plot(out_cogu$udmap, main="Guillemot")
plot(out_razo$udmap, main="Razorbill")
# Chunk 6
par(mfrow=c(2,2))
hist(out_kitt$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Kittiwake")
lines(rep(out_kitt$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_cogu$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Guillemot")
lines(rep(out_cogu$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_razo$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Razorbill")
lines(rep(out_razo$allbirds_prey_est,2),c(0,10000),lwd=2)
# Chunk 7
tab_kitt <- data.frame(
Species = "Kittiwake",
Estimate = out_kitt$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_kitt$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_kitt$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_kitt$allbirds_prey_sim, 0.975)))
tab_cogu <- data.frame(
Species = "Guillemot",
Estimate = out_cogu$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_cogu$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_cogu$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_cogu$allbirds_prey_sim, 0.975)))
tab_razo <- data.frame(
Species = "Razorbill",
Estimate = out_razo$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_razo$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_razo$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_razo$allbirds_prey_sim, 0.975)))
kable(rbind(tab_kitt, tab_cogu, tab_razo))
# Chunk 8
spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
# Chunk 9
spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "medium", tooldir = tooldir)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# if ready, install the package in your R system library
devtools::install()
# not sure if devtools::build() is interchangeable with the below as it also creates a vignette folder
# but maybe not a template introduction.Rmd?
# and vignette for creating page on github
usethis::use_vignette("introduction")
# if ready, install the package in your R system library
devtools::install()
# check that the function works by running ?spmapper for example
?spmapper
# if ready, install the package in your R system library
devtools::install()
# after changes
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(ecowings)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper")
tooldir <- file.path("R", package = "ecowings")
system.file("R", "functions_preymodel.R", package = "ecowings")
system.file("R", "functions_spmapper.R", package = "ecowings")
system.file("R", "functions_fpudoverlap.R", package = "ecowings")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
library(ecowings)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper")
tooldir <- file.path("R", package = "ecowings")
system.file("R", "functions_preymodel.R", package = "ecowings")
system.file("R", "functions_spmapper.R", package = "ecowings")
system.file("R", "functions_fpudoverlap.R", package = "ecowings")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "ecowings"))
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", #"North_Sea_OWF_2030_polygons"))
fppolys <- fppolys[c(112,116),] ## NnG and Berwick Bank
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
# after changes
devtools::build()
# then load it
library(ecowings)
# check that the function works by running ?spmapper for example
?spmapper
# then load it
library(ecowings)
# check that the function works by running ?spmapper for example
?spmapper
knitr::opts_chunk$set(echo = TRUE)
library(ecowings)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper")
tooldir <- file.path("R", package = "ecowings")
system.file("R", "functions_preymodel.R", package = "ecowings")
system.file("R", "functions_spmapper.R", package = "ecowings")
system.file("R", "functions_fpudoverlap.R", package = "ecowings")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "ecowings"))
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", #"North_Sea_OWF_2030_polygons"))
fppolys <- fppolys[c(112,116),] ## NnG and Berwick Bank
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "ecowings"))
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", #"North_Sea_OWF_2030_polygons"))
fppolys <- fppolys[c(112,116),] ## NnG and Berwick Bank
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(ecowings)
spmapper()
spmapper::fn.tot.prey()
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# if pkg is corrupted unlink it
unlink("C:/Users/clacap/AppData/Local/R/win-library/4.4/ecowings", recursive = TRUE, force = TRUE)
# or manually remove it by browsing to it
# clean
devtools::clean_dll()
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(ecowings)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(ecowings)
knitr::opts_chunk$set(echo = TRUE)
library(ecowings)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper")
tooldir <- file.path("R", package = "ecowings")
system.file("R", "functions_preymodel.R", package = "ecowings")
system.file("R", "functions_spmapper.R", package = "ecowings")
system.file("R", "functions_fpudoverlap.R", package = "ecowings")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "ecowings"))
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", #"North_Sea_OWF_2030_polygons"))
fppolys <- fppolys[c(112,116),] ## NnG and Berwick Bank
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
print(tooldir)
View(fppolys)
?spmapper
## Show UD map
## ########################################
#' @title TO BE ADDED - TITLE OF MAIN SPMAPPER FUNCTION
#' @description TO BE ADDED - OVERALL DESCRIPTION OF WHAT SPMAPPER DOES
#' @param spname Species name: a character string. Must be "Guillemot", "Kittiwake" or "Razorbill"
#' @param fppolys Footprint(s): a simple feature collection
#' @param popscen Population scenario: a character string. Must be "baseline", "low" or "high"
#' @param tooldir Path to directory containing tool: a character string.
#' @return A list, with elements: "spname" (species name), "popscen" (population scenario"), "energypars_base_est" (energetics parameters - estimates), "energypars_base_sim" (energetics parameters - simulations), "udmap" (utilisation distribution, a raster), "popsize" (population size - BREEDING PAIRS **TBC**, "fp_ud_overlap" (proportion of UD within a footprint), "nbirds_in_fp" (number of birds in footprints), "onebird_prey_est" (prey intake from one bird - estimate), "onebird_prey_sim" (prey intake from one bird - simulations), "allbirds_prey_est" (prey intake from all birds in footprints - estimate), "allbirds_prey_sim" (prey intake from all birds in footprints - simulations)
#' @export
spmapper <- function(spname, fppolys, popscen, tooldir){
## ################################
## 1. Get four letter species code
spcodes <- c("Kittiwake" = "BLKI", "Guillemot" = "COGU", "Razorbill" = "RAZO")
if(! any(spname == names(spcodes))){ stop("Invalid species name: must be 'Kittiwake', 'Guillemot' or 'Razorbill'!") }
spcode <- as.character(spcodes[which(names(spcodes) == spname)])
## #################################
## 2. Load population size data
if(! any(popscen == c("low", "baseline", "high"))){
stop("Invalid population scenario: must be 'low', 'baseline' or 'high'")
}
file_popsize <- system.file("extdata",
"fame_population_ests.csv",
package = "ecowings")
popsizes <- read.csv(file_popsize)
popsize <- popsizes$value[popsizes$spp == spcode & popsizes$estimate == popscen]
## ################################
## 3. Load data - energetics parameters - estimates
file_energypars_est <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "ecowings")
energypars_base_est <- read.csv(file_energypars_est)
my_param <- energypars_base_est$parameter
ww <- which(colnames(energypars_base_est) == spname)
energypars_base_est <- data.frame(as.list(energypars_base_est[,ww]))
names(energypars_base_est) <- my_param
## kable(t(energypars_base_est))
## ################################
## 4. Load dat - energetic parameters - simulations (capturing uncertainty)
file_energypars_sim <- system.file("extdata",
paste(spcode, "sampled", "params", "csv",
sep="."),
package = "ecowings")
energypars_base_sim <- read.csv(file_energypars_sim)
energypars_base_sim$init_mass_sd <- energypars_base_est$init_mass_sd ## fix missing values
energypars_base_sim$chicks_n[energypars_base_sim$chicks_n < 0.01] <- 0.01
## kable(round(t(apply(energypars_base_sim, 2, summary)), 2))
## ################################
## 5. Load species-level UD
file_udmap <- system.file(
"extdata",
paste("FAME_UD_standardised_", spcode, ".tif"),
package = "ecowings"
)
udmap <- terra::rast(file_udmap)
terra::crs(udmap) <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0'
## #################################
## 6. Proportion of UD overlapping with polygons
fp_ud_overlap <- fpudoverlap(fppolys = fppolys, udmap = udmap)
## #################################
## 7. Number of birds in footprint
nbirds_in_fp <- popsize * fp_ud_overlap
## #################################
## 8. Prey calculation - estimates and simulations
onebird_prey_est <- fn.tot.prey(
TB_foraging = energypars_base_est$TB_foraging,
TB_flying = energypars_base_est$TB_flying,
TB_resting_sea = energypars_base_est$TB_resting_sea,
TB_nest = energypars_base_est$TB_nest,
ER_foraging = energypars_base_est$ER_foraging,
ER_flying = energypars_base_est$ER_flying,
ER_resting_sea = energypars_base_est$ER_resting_sea,
ER_nest = energypars_base_est$ER_nest,
ER_warming_food = energypars_base_est$ER_warming_food,
chick_ER = energypars_base_est$chick_ER,
chicks_n = energypars_base_est$chicks_n,
BS_length = energypars_base_est$BS_length,
init_mass = energypars_base_est$init_mass,
mass_change = energypars_base_est$mass_change,
tissue_en_dens = energypars_base_est$tissue_en_dens,
energy_prey_conv = energypars_base_est$energy_prey_conv,
assim_effic = energypars_base_est$assim_effic)
onebird_prey_sim <- fn.tot.prey(
TB_foraging = energypars_base_sim$TB_foraging,
TB_flying = energypars_base_sim$TB_flying,
TB_resting_sea = energypars_base_sim$TB_resting_sea,
TB_nest = energypars_base_sim$TB_nest,
ER_foraging = energypars_base_sim$ER_foraging,
ER_flying = energypars_base_sim$ER_flying,
ER_resting_sea = energypars_base_sim$ER_resting_sea,
ER_nest = energypars_base_sim$ER_nest,
ER_warming_food = energypars_base_sim$ER_warming_food,
chick_ER = energypars_base_sim$chick_ER,
chicks_n = energypars_base_sim$chicks_n,
BS_length = energypars_base_sim$BS_length,
init_mass = energypars_base_sim$init_mass,
mass_change = energypars_base_sim$mass_change,
tissue_en_dens = energypars_base_sim$tissue_en_dens,
energy_prey_conv = energypars_base_sim$energy_prey_conv,
assim_effic = energypars_base_sim$assim_effic)
## #################################
## 10. Total prey loss
allbirds_prey_est <- nbirds_in_fp * onebird_prey_est
allbirds_prey_sim <- nbirds_in_fp * onebird_prey_sim
## #################################
## 11. Output
list(
spname = spname,
popscen = popscen,
energypars_base_est = energypars_base_est,
energypars_base_sim = energypars_base_sim,
udmap = udmap,
popsize = popsize,
fp_ud_overlap = fp_ud_overlap,
nbirds_in_fp = nbirds_in_fp,
onebird_prey_est = onebird_prey_est,
onebird_prey_sim = onebird_prey_sim,
allbirds_prey_est = allbirds_prey_est,
allbirds_prey_sim = allbirds_prey_sim
)
}
## ########################################
list.files(system.file("extdata", package = "ecowings"), full.names = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ecowings)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper")
tooldir <- file.path("R", package = "ecowings")
system.file("R", "functions_preymodel.R", package = "ecowings")
system.file("R", "functions_spmapper.R", package = "ecowings")
system.file("R", "functions_fpudoverlap.R", package = "ecowings")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "ecowings"))
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", #"North_Sea_OWF_2030_polygons"))
fppolys <- fppolys[c(112,116),] ## NnG and Berwick Bank
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
spname <- "Kittiwake"
spcodes <- c("Kittiwake" = "BLKI", "Guillemot" = "COGU", "Razorbill" = "RAZO")
spcode <- spcodes[spname]
file_udmap <- system.file(
"extdata",
paste0("FAME_UD_standardised_", spcode, ".tif"),
package = "ecowings"
)
file_udmap  # print this
spname <- "Kittiwake"
spcodes <- c("Kittiwake" = "BLKI", "Guillemot" = "COGU", "Razorbill" = "RAZO")
spcode <- spcodes[spname]
file_udmap <- system.file(
"extdata",
paste0("FAME_UD_standardised_", spcode, ".tif"),
package = "ecowings"
)
file_udmap  # print this
