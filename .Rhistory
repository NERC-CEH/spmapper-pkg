pkgdown::build_site()
# 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
Sys.setenv(GITHUB_PAT = "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")
# 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
Sys.setenv(GITHUB_PAT = "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")
# test package installation from github
devtools::install_github("NERC-CEH/spmapper-Rpkg")
# test package installation from github
devtools::install_github("NERC-CEH/spmapper-pkg")
library(pkgdown)
pkgdown::build_site()
# use pkgdown to add logos (it will find them in pkgdown/favicon)
build_favicons(pkg = ".", overwrite = FALSE)
library(pkgdown)
# use pkgdown to add logos (it will find them in pkgdown/favicon)
build_favicons(pkg = ".", overwrite = FALSE)
seabird <- system.file("extdata", package = "spmapper")
Seabird_energetics_pars_spmapper <- read.csv(seabird)
## load Seabird_energetics_pars_spmapper.csv
library(spmapper)
seabird <- system.file("extdata", package = "spmapper")
Seabird_energetics_pars_spmapper <- read.csv(seabird)
# get full path
seabird_energetics_path <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
# Read the CSV file
Seabird_energetics_pars_spmapper <- read.csv(seabird_energetics_path)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
# get full path
seabird_energetics_path <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
# Read the CSV file
Seabird_energetics_pars_spmapper <- read.csv(seabird_energetics_path)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
library(pkgdown)
pkgdown::build_site()
library(pkgdown)
pkgdown::build_site()
pkgdown::clean_site(force = TRUE)
# remove former contens in docs:
pkgdown::build_site()
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
library(pkgdown)
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
library(pkgdown)
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
FAME_UD_standardised_RAZO_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_RAZO.tif",
package = "spmapper"))
FAME_UD_standardised_RAZO_m <- terra::as.matrix(system.file("extdata",
"FAME_UD_standardised_RAZO.tif",
package = "spmapper"))
plot(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_m <- terra::as.matrix(FAME_UD_standardised_RAZO_r)
plot(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_RAZO.tif",
package = "spmapper"))
FAME_UD_standardised_RAZO_m <- terra::as.matrix(FAME_UD_standardised_RAZO_r)
plot(FAME_UD_standardised_RAZO_m)
#save the metadata
nrows <- nrow(FAME_UD_standardised_RAZO_r)
ncols <- ncol(FAME_UD_standardised_RAZO_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_RAZO_r)
ncols <- ncol(FAME_UD_standardised_RAZO_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[4])
crs <- crs(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
crs <- crs(FAME_UD_standardised_RAZO_r)
crs <- terra::crs(FAME_UD_standardised_RAZO_r)
plot(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_r
plot(FAME_UD_standardised_RAZO_r)
terra::plot(FAME_UD_standardised_RAZO_r)
crs <- terra::crs(FAME_UD_standardised_RAZO_r)
crs
# assign crs
terra::crs(FAME_UD_standardised_RAZO_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_RAZO <- list(matrix = FAME_UD_standardised_RAZO_m,
metadata = FAME_UD_standardised_RAZO_metadata)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# get full path
RAZO_sampled_path <- system.file("extdata",
"RAZO.sampled.params.csv",
package = "spmapper")
# Read the CSV file
RAZO_sampled_spmapper <- read.csv(RAZO_sampled_path)
usethis::use_data(RAZO_sampled_spmapper, overwrite = TRUE)
## load BLKI.sampled.params.csv ##
###############################################
# get full path
BLKI_sampled_path <- system.file("extdata",
"BLKI.sampled.params.csv",
package = "spmapper")
# Read the CSV file
BLKI_sampled_spmapper <- read.csv(BLKI_sampled_path)
usethis::use_data(BLKI_sampled_spmapper, overwrite = TRUE)
## load COGU.sampled.params.csv ##
###############################################
# get full path
COGU_sampled_path <- system.file("extdata",
"COGU.sampled.params.csv",
package = "spmapper")
# Read the CSV file
COGU_sampled_spmapper <- read.csv(COGU_sampled_path)
usethis::use_data(COGU_sampled_spmapper, overwrite = TRUE)
## load fame_population_ests.csv ##
###############################################
# get full path
fame_population_path <- system.file("extdata",
"fame_population_ests.csv",
package = "spmapper")
# Read the CSV file
fame_population_spmapper <- read.csv(fame_population_path)
usethis::use_data(fame_population_spmapper, overwrite = TRUE)
## prepare `FAME_UD_standardised_BLKI.tif` dataset raster
FAME_UD_standardised_BLKI_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_BLKI.tif",
package = "spmapper"))
FAME_UD_standardised_BLKI_m <- terra::as.matrix(FAME_UD_standardised_BLKI_r)
terra::plot(FAME_UD_standardised_BLKI_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_BLKI_r)
ncols <- ncol(FAME_UD_standardised_BLKI_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_BLKI_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_BLKI_r)
FAME_UD_standardised_BLKI_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_BLKI <- list(matrix = FAME_UD_standardised_BLKI_m,
metadata = FAME_UD_standardised_BLKI_metadata)
usethis::use_data(FAME_UD_standardised_BLKI, overwrite = TRUE)
## prepare `FAME_UD_standardised_COGU.tif` dataset raster
FAME_UD_standardised_COGU_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_COGU.tif",
package = "spmapper"))
FAME_UD_standardised_COGU_m <- terra::as.matrix(FAME_UD_standardised_COGU_r)
terra::plot(FAME_UD_standardised_COGU_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_COGU_r)
ncols <- ncol(FAME_UD_standardised_COGU_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_COGU_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_COGU_r)
FAME_UD_standardised_COGU_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_COGU <- list(matrix = FAME_UD_standardised_COGU_m,
metadata = FAME_UD_standardised_COGU_metadata)
usethis::use_data(FAME_UD_standardised_COGU, overwrite = TRUE)
## prepare `FAME_UD_standardised_RAZO.tif` dataset raster
FAME_UD_standardised_RAZO_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_RAZO.tif",
package = "spmapper"))
FAME_UD_standardised_RAZO_m <- terra::as.matrix(FAME_UD_standardised_RAZO_r)
terra::plot(FAME_UD_standardised_RAZO_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_RAZO_r)
ncols <- ncol(FAME_UD_standardised_RAZO_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_RAZO_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_RAZO <- list(matrix = FAME_UD_standardised_RAZO_m,
metadata = FAME_UD_standardised_RAZO_metadata)
usethis::use_data(FAME_UD_standardised_RAZO, overwrite = TRUE)
# get full path
RAZO_sampled_path <- system.file("extdata",
"RAZO.sampled.params.csv",
package = "spmapper")
# Read the CSV file
RAZO_sampled_spmapper <- read.csv(RAZO_sampled_path)
usethis::use_data(RAZO_sampled_spmapper, overwrite = TRUE)
load("N:/ecowings/data/Seabird_energetics_pars_spmapper.rda")
View(Seabird_energetics_pars_spmapper)
str(RAZO_sampled_spmapper)
# get full path
seabird_energetics_path <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
# Read the CSV file
Seabird_energetics_pars_spmapper <- read.csv(seabird_energetics_path)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
str(Seabird_energetics_pars_spmapper))
str(Seabird_energetics_pars_spmapper)
str(RAZO_sampled_spmapper)
sinew::makeOxygen(RAZO_sampled_spmapper)
library(sinew)
install.packages('sinew')
library(sinew)
sinew::makeOxygen(RAZO_sampled_spmapper)
## load COGU.sampled.params.csv ##
###############################################
# get full path
COGU_sampled_path <- system.file("extdata",
"COGU.sampled.params.csv",
package = "spmapper")
# Read the CSV file
COGU_sampled_spmapper <- read.csv(COGU_sampled_path)
usethis::use_data(COGU_sampled_spmapper, overwrite = TRUE)
sinew::makeOxygen(COGU_sampled_spmapper)
## load BLKI.sampled.params.csv ##
###############################################
# get full path
BLKI_sampled_path <- system.file("extdata",
"BLKI.sampled.params.csv",
package = "spmapper")
# Read the CSV file
BLKI_sampled_spmapper <- read.csv(BLKI_sampled_path)
usethis::use_data(BLKI_sampled_spmapper, overwrite = TRUE)
sinew::makeOxygen(BLKI_sampled_spmapper)
## prepare `FAME_UD_standardised_RAZO.tif` dataset raster
FAME_UD_standardised_RAZO_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_RAZO.tif",
package = "spmapper"))
FAME_UD_standardised_RAZO_m <- terra::as.matrix(FAME_UD_standardised_RAZO_r)
terra::plot(FAME_UD_standardised_RAZO_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_RAZO_r)
ncols <- ncol(FAME_UD_standardised_RAZO_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_RAZO_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_RAZO <- list(matrix = FAME_UD_standardised_RAZO_m,
metadata = FAME_UD_standardised_RAZO_metadata)
usethis::use_data(FAME_UD_standardised_RAZO, overwrite = TRUE)
sinew::makeOxygen(FAME_UD_standardised_RAZO)
str(FAME_UD_standardised_RAZO)
## prepare `FAME_UD_standardised_COGU.tif` dataset raster
FAME_UD_standardised_COGU_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_COGU.tif",
package = "spmapper"))
FAME_UD_standardised_COGU_m <- terra::as.matrix(FAME_UD_standardised_COGU_r)
terra::plot(FAME_UD_standardised_COGU_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_COGU_r)
ncols <- ncol(FAME_UD_standardised_COGU_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_COGU_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_COGU_r)
FAME_UD_standardised_COGU_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_COGU <- list(matrix = FAME_UD_standardised_COGU_m,
metadata = FAME_UD_standardised_COGU_metadata)
usethis::use_data(FAME_UD_standardised_COGU, overwrite = TRUE)
str(FAME_UD_standardised_COGU)
## prepare `FAME_UD_standardised_BLKI.tif` dataset raster
FAME_UD_standardised_BLKI_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_BLKI.tif",
package = "spmapper"))
FAME_UD_standardised_BLKI_m <- terra::as.matrix(FAME_UD_standardised_BLKI_r)
terra::plot(FAME_UD_standardised_BLKI_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_BLKI_r)
ncols <- ncol(FAME_UD_standardised_BLKI_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_BLKI_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_BLKI_r)
FAME_UD_standardised_BLKI_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_BLKI <- list(matrix = FAME_UD_standardised_BLKI_m,
metadata = FAME_UD_standardised_BLKI_metadata)
usethis::use_data(FAME_UD_standardised_BLKI, overwrite = TRUE)
str(FAME_UD_standardised_BLKI)
## load fame_population_ests.csv ##
###############################################
# get full path
fame_population_path <- system.file("extdata",
"fame_population_ests.csv",
package = "spmapper")
# Read the CSV file
fame_population_spmapper <- read.csv(fame_population_path)
usethis::use_data(fame_population_spmapper, overwrite = TRUE)
sinew::makeOxygen(fame_population_spmapper)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package
devtools::check()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
warnings()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
## load Seabird_energetics_pars_spmapper.csv ##
###############################################
# get full path
seabird_energetics_path <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
# Read the CSV file
Seabird_energetics_pars_spmapper <- read.csv(seabird_energetics_path)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
str(Seabird_energetics_pars_spmapper)
