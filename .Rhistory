system.file("R", "functions_fpudoverlap.R", package = "spmapper")
system.file("R", "functions_spmapplot.R", package = "spmapper")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fp <- system.file("R", "functions_fpudoverlap.R", package = "spmapper")
if (fp == "") {
message("File not found in package.")
} else {
message("Found file at: ", fp)
}
system.file("R", "functions_preymodel.R", package = "spmapper")
system.file("R", "functions_spmapper.R", package = "spmapper")
system.file("R", "functions_fpudoverlap.R", package = "spmapper")
system.file("R", "functions_spmapplot.R", package = "spmapper")
fppolys <- sf::st_read(system.file("demo/UK_OWF_polygons_by_status", package = "spmapper"))
fppolys <- fppolys %>% dplyr::filter(country == "United Kingdom")
fppolys <- fppolys %>% dplyr::filter(status %in% c("Approved", "Construction", "Planned", "Production" ))
fppolys <- fppolys %>% dplyr::filter(!grepl("OFTO", name)) # exclude cable polygons
proj.laea <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs'
fppolys <-  st_transform(fppolys, crs = proj.laea)
fppolys <-  fppolys %>% dplyr::filter(name == "SeaGreen Alpha") # filter for one OWF for now <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< REMOVE/REPLACE
# Union of polygons to avoid double counting within overlapping polygons
fppolys <- st_union(fppolys) # combine overlapping elements
fppolys <- st_sf(geometry = st_cast(fppolys, "POLYGON"))  # return to sfc
fppolys <- sf::st_read(system.file("demo/UK_OWF_polygons_by_status", package = "spmapper"))
fppolys <- fppolys %>% dplyr::filter(country == "United Kingdom")
fppolys <- fppolys %>% dplyr::filter(status %in% c("Approved", "Construction", "Planned", "Production" ))
fppolys <- fppolys %>% dplyr::filter(!grepl("OFTO", name)) # exclude cable polygons
proj.laea <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs'
fppolys <-  st_transform(fppolys, crs = proj.laea)
fppolys <-  fppolys %>% dplyr::filter(name == "SeaGreen Alpha") # filter for one OWF for now <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< REMOVE/REPLACE
# Union of polygons to avoid double counting within overlapping polygons
fppolys <- st_union(fppolys) # combine overlapping elements
fppolys <- st_sf(geometry = st_cast(fppolys, "POLYGON"))  # return to sfc
# Example BLKI UD for testing code
file_udmap <- system.file("extdata", paste0("FAME_UD_standardised_", "BLKI", ".tif"), package = "spmapper")
udmap <- terra::rast(file_udmap)
terra::crs(udmap) <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0'
spmapplot(udmap,fppolys) # this colour scale wont work for raster as this is UD values, much less than prey map values, just used to test
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
# check that the function works by running ?spmapper for example
?spmapper
?fn.tot.prey
spmapper()
spmapper()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(spmapper)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
library(rnaturalearth)
library(viridis)
library(ggplot2)
library(patchwork)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper2","spmapper")
#tooldir <- file.path("R", package = "ecowings")
#tooldir <- system.file("scripts", package = "ecowings")
tooldir <- system.file("extdata", package = "spmapper")
system.file("R", "functions_preymodel.R", package = "spmapper")
system.file("R", "functions_spmapper.R", package = "spmapper")
system.file("R", "functions_fpudoverlap.R", package = "spmapper")
system.file("R", "functions_spmapplot.R", package = "spmapper")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fppolys <- sf::st_read(system.file("demo/UK_OWF_polygons_by_status", package = "spmapper"))
fppolys <- fppolys %>% dplyr::filter(country == "United Kingdom")
fppolys <- fppolys %>% dplyr::filter(status %in% c("Approved", "Construction", "Planned", "Production" ))
fppolys <- fppolys %>% dplyr::filter(!grepl("OFTO", name)) # exclude cable polygons
proj.laea <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs'
fppolys <-  st_transform(fppolys, crs = proj.laea)
fppolys <-  fppolys %>% dplyr::filter(name == "SeaGreen Alpha") # filter for one OWF for now <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< REMOVE/REPLACE
# Union of polygons to avoid double counting within overlapping polygons
fppolys <- st_union(fppolys) # combine overlapping elements
fppolys <- st_sf(geometry = st_cast(fppolys, "POLYGON"))  # return to sfc
# Example BLKI UD for testing code
file_udmap <- system.file("extdata", paste0("FAME_UD_standardised_", "BLKI", ".tif"), package = "spmapper")
udmap <- terra::rast(file_udmap)
terra::crs(udmap) <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0'
spmapplot(udmap,fppolys) # this colour scale wont work for raster as this is UD values, much less than prey map values, just used to test
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
data
spmapper <- function(spname, fppolys, popscen, tooldir){
## ################################
## 1. Get four letter species code
spcodes <- c("Kittiwake" = "BLKI", "Guillemot" = "COGU", "Razorbill" = "RAZO")
if(! any(spname == names(spcodes))){ stop("Invalid species name: must be 'Kittiwake', 'Guillemot' or 'Razorbill'!") }
spcode <- as.character(spcodes[which(names(spcodes) == spname)])
## #################################
## 2. Load population size data
if(! any(popscen == c("low", "baseline", "high"))){
stop("Invalid population scenario: must be 'low', 'baseline' or 'high'")
}
file_popsize <- system.file(tooldir,
"fame_population_ests.csv",
package = "spmapper")
popsizes <- read.csv(file_popsize)
popsize <- popsizes$value[popsizes$spp == spcode & popsizes$estimate == popscen]
## ################################
## 3. Load data - energetics parameters - estimates
file_energypars_est <- system.file(tooldir,
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
energypars_base_est <- read.csv(file_energypars_est)
my_param <- energypars_base_est$parameter
ww <- which(colnames(energypars_base_est) == spname)
energypars_base_est <- data.frame(as.list(energypars_base_est[,ww]))
names(energypars_base_est) <- my_param
## kable(t(energypars_base_est))
## ################################
## 4. Load dat - energetic parameters - simulations (capturing uncertainty)
file_energypars_sim <- system.file(tooldir,
paste(spcode, "sampled", "params", "csv",
sep="."),
package = "spmapper")
energypars_base_sim <- read.csv(file_energypars_sim)
energypars_base_sim$init_mass_sd <- energypars_base_est$init_mass_sd ## fix missing values
energypars_base_sim$chicks_n[energypars_base_sim$chicks_n < 0.01] <- 0.01
## kable(round(t(apply(energypars_base_sim, 2, summary)), 2))
## ################################
## 5. Load species-level UD
file_udmap <- system.file(
tooldir,
paste0("FAME_UD_standardised_", spcode, ".tif"),
package = "spmapper"
)
udmap <- terra::rast(file_udmap)
terra::crs(udmap) <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0'
## #################################
## 6. Proportion of UD overlapping with polygons
fp_ud_overlap <- fpudoverlap(fppolys = fppolys, udmap = udmap)
## #################################
## 7. Number of birds in footprint
nbirds_in_fp <- popsize * fp_ud_overlap
## #################################
## 8. Prey calculation - estimates and simulations
onebird_prey_kg_est <- fn.tot.prey(
TB_foraging = energypars_base_est$TB_foraging,
TB_flying = energypars_base_est$TB_flying,
TB_resting_sea = energypars_base_est$TB_resting_sea,
TB_nest = energypars_base_est$TB_nest,
ER_foraging = energypars_base_est$ER_foraging,
ER_flying = energypars_base_est$ER_flying,
ER_resting_sea = energypars_base_est$ER_resting_sea,
ER_nest = energypars_base_est$ER_nest,
ER_warming_food = energypars_base_est$ER_warming_food,
chick_ER = energypars_base_est$chick_ER,
chicks_n = energypars_base_est$chicks_n,
BS_length = energypars_base_est$BS_length,
init_mass = energypars_base_est$init_mass,
mass_change = energypars_base_est$mass_change,
tissue_en_dens = energypars_base_est$tissue_en_dens,
energy_prey_conv = energypars_base_est$energy_prey_conv,
assim_effic = energypars_base_est$assim_effic)
onebird_prey_kg_sim <- fn.tot.prey(
TB_foraging = energypars_base_sim$TB_foraging,
TB_flying = energypars_base_sim$TB_flying,
TB_resting_sea = energypars_base_sim$TB_resting_sea,
TB_nest = energypars_base_sim$TB_nest,
ER_foraging = energypars_base_sim$ER_foraging,
ER_flying = energypars_base_sim$ER_flying,
ER_resting_sea = energypars_base_sim$ER_resting_sea,
ER_nest = energypars_base_sim$ER_nest,
ER_warming_food = energypars_base_sim$ER_warming_food,
chick_ER = energypars_base_sim$chick_ER,
chicks_n = energypars_base_sim$chicks_n,
BS_length = energypars_base_sim$BS_length,
init_mass = energypars_base_sim$init_mass,
mass_change = energypars_base_sim$mass_change,
tissue_en_dens = energypars_base_sim$tissue_en_dens,
energy_prey_conv = energypars_base_sim$energy_prey_conv,
assim_effic = energypars_base_sim$assim_effic)
## #################################
## 10. Total prey loss
allbirds_prey_est <- nbirds_in_fp * onebird_prey_kg_est
allbirds_prey_sim <- nbirds_in_fp * onebird_prey_kg_sim
## #################################
# 11 . Prey map
# baseline pop. estimate
prey_cons_map <- udmap
values(prey_cons_map) <- values(prey_cons_map) * (popsize * onebird_prey_kg_est/1000) # tonnes
## #################################
## 12. Output
list(
spname = spname,
popscen = popscen,
energypars_base_est = energypars_base_est,
energypars_base_sim = energypars_base_sim,
udmap = udmap,
popsize = popsize,
fp_ud_overlap = fp_ud_overlap,
nbirds_in_fp = nbirds_in_fp,
onebird_prey_kg_est = onebird_prey_kg_est,
onebird_prey_kg_sim = onebird_prey_kg_sim,
allbirds_prey_est = allbirds_prey_est,
allbirds_prey_sim = allbirds_prey_sim,
prey_cons_map = prey_cons_map # baseline pop. estimate prey consumption map
)
}
## ########################################
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_kitt <- spmapper(spname = "BLKI", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
list.files(system.file("extdata", package = "spmapper"))
View(fppolys)
spmapplot
## Run tool for each species
spmapplot
## Run tool for each species
spmapplot()
?spmapplot
?spmapplot
?spmapper
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper2","spmapper")
#tooldir <- file.path("R", package = "ecowings")
#tooldir <- system.file("scripts", package = "ecowings")
tooldir <- system.file("extdata", package = "spmapper")
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(spmapper)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
library(rnaturalearth)
library(viridis)
library(ggplot2)
library(patchwork)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper2","spmapper")
#tooldir <- file.path("R", package = "ecowings")
#tooldir <- system.file("scripts", package = "ecowings")
tooldir <- system.file("extdata", package = "spmapper")
system.file("R", "functions_preymodel.R", package = "spmapper")
system.file("R", "functions_spmapper.R", package = "spmapper")
system.file("R", "functions_fpudoverlap.R", package = "spmapper")
system.file("R", "functions_spmapplot.R", package = "spmapper")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fppolys <- sf::st_read(system.file("demo/UK_OWF_polygons_by_status", package = "spmapper"))
fppolys <- fppolys %>% dplyr::filter(country == "United Kingdom")
fppolys <- fppolys %>% dplyr::filter(status %in% c("Approved", "Construction", "Planned", "Production" ))
fppolys <- fppolys %>% dplyr::filter(!grepl("OFTO", name)) # exclude cable polygons
proj.laea <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs'
fppolys <-  st_transform(fppolys, crs = proj.laea)
fppolys <-  fppolys %>% dplyr::filter(name == "SeaGreen Alpha") # filter for one OWF for now <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< REMOVE/REPLACE
# Union of polygons to avoid double counting within overlapping polygons
fppolys <- st_union(fppolys) # combine overlapping elements
fppolys <- st_sf(geometry = st_cast(fppolys, "POLYGON"))  # return to sfc
# Example BLKI UD for testing code
file_udmap <- system.file("extdata", paste0("FAME_UD_standardised_", "BLKI", ".tif"), package = "spmapper")
udmap <- terra::rast(file_udmap)
terra::crs(udmap) <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0'
spmapplot(udmap,fppolys) # this colour scale wont work for raster as this is UD values, much less than prey map values, just used to test
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
# check that the function works by running ?spmapper for example
?spmapper
?fn.tot.prey
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(spmapper)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
library(rnaturalearth)
library(viridis)
library(ggplot2)
library(patchwork)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper2","spmapper")
#tooldir <- file.path("R", package = "ecowings")
#tooldir <- system.file("scripts", package = "ecowings")
tooldir <- system.file("extdata", package = "spmapper")
system.file("R", "functions_preymodel.R", package = "spmapper")
system.file("R", "functions_spmapper.R", package = "spmapper")
system.file("R", "functions_fpudoverlap.R", package = "spmapper")
system.file("R", "functions_spmapplot.R", package = "spmapper")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fppolys <- sf::st_read(system.file("demo/UK_OWF_polygons_by_status", package = "spmapper"))
fppolys <- fppolys %>% dplyr::filter(country == "United Kingdom")
fppolys <- fppolys %>% dplyr::filter(status %in% c("Approved", "Construction", "Planned", "Production" ))
fppolys <- fppolys %>% dplyr::filter(!grepl("OFTO", name)) # exclude cable polygons
proj.laea <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs'
fppolys <-  st_transform(fppolys, crs = proj.laea)
fppolys <-  fppolys %>% dplyr::filter(name == "SeaGreen Alpha") # filter for one OWF for now <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< REMOVE/REPLACE
# Union of polygons to avoid double counting within overlapping polygons
fppolys <- st_union(fppolys) # combine overlapping elements
fppolys <- st_sf(geometry = st_cast(fppolys, "POLYGON"))  # return to sfc
# Example BLKI UD for testing code
file_udmap <- system.file("extdata", paste0("FAME_UD_standardised_", "BLKI", ".tif"), package = "spmapper")
udmap <- terra::rast(file_udmap)
terra::crs(udmap) <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0'
spmapplot(udmap,fppolys) # this colour scale wont work for raster as this is UD values, much less than prey map values, just used to test
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_cogu <- spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_razo <- spmapper(spname = "Razorbill", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
(spmapplot(out_kitt$prey_cons_map, fppolys) + ggtitle("Kittiwake")) +
(spmapplot(out_cogu$prey_cons_map, fppolys) + ggtitle("Guillemot")) +
(spmapplot(out_razo$prey_cons_map, fppolys) + ggtitle("Razorbill")) +
patchwork::plot_layout(ncol = 2)
# SPACING ISSUE
par(mfrow=c(2,2))
hist(out_kitt$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Kittiwake")
lines(rep(out_kitt$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_cogu$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Guillemot")
lines(rep(out_cogu$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_razo$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Razorbill")
lines(rep(out_razo$allbirds_prey_est,2),c(0,10000),lwd=2)
tab_kitt <- data.frame(
Species = "Kittiwake",
Estimate = out_kitt$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_kitt$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_kitt$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_kitt$allbirds_prey_sim, 0.975)))
tab_cogu <- data.frame(
Species = "Guillemot",
Estimate = out_cogu$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_cogu$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_cogu$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_cogu$allbirds_prey_sim, 0.975)))
tab_razo <- data.frame(
Species = "Razorbill",
Estimate = out_razo$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_razo$allbirds_prey_sim, 0.025)),
Sim_Mean = mean(out_razo$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_razo$allbirds_prey_sim, 0.975)))
kable(rbind(tab_kitt, tab_cogu, tab_razo))
spmapper(spname = "kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "medium", tooldir = tooldir)
spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "medium", tooldir = tooldir)
spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = "test")
fppolys <- sf::st_read(file.path(tooldir, "ExampleData", "North_Sea_OWF_2030_polygons"))
fppolys <- sf::st_read(file.path(tooldir, "demo", "North_Sea_OWF_2030_polygons"))
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", "North_Sea_OWF_2030_polygons"))
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "spmapper"))
fppolys <- fppolys[which.min(sf::st_area(fppolys)),]
spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", "North_Sea_OWF_2030_polygons"))
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "spmapper"))
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", "North_Sea_OWF_2030_polygons"))
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "spmapper"))
fppolys <- fppolys[1,]
spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
#fppolys <- sf::st_read(file.path(tooldir, "ExampleData", "North_Sea_OWF_2030_polygons"))
fppolys <- sf::st_read(system.file("demo/North_Sea_OWF_2030_polygons", package = "spmapper"))
fppolys <- fppolys[155,]
spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
library(spmapper)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
library(rnaturalearth)
library(viridis)
library(ggplot2)
library(patchwork)
#tooldir <- file.path("/data", "notebooks", "rstudio-spmapper2","spmapper")
#tooldir <- file.path("R", package = "ecowings")
#tooldir <- system.file("scripts", package = "ecowings")
tooldir <- system.file("extdata", package = "spmapper")
system.file("R", "functions_preymodel.R", package = "spmapper")
system.file("R", "functions_spmapper.R", package = "spmapper")
system.file("R", "functions_fpudoverlap.R", package = "spmapper")
system.file("R", "functions_spmapplot.R", package = "spmapper")
#source(file.path(tooldir, "R", "functions_preymodel.R"))
#source(file.path(tooldir, "R", "functions_spmapper.R"))
#source(file.path(tooldir, "R", "functions_fpudoverlap.R"))
fppolys <- sf::st_read(system.file("demo/UK_OWF_polygons_by_status", package = "spmapper"))
fppolys <- fppolys %>% dplyr::filter(country == "United Kingdom")
fppolys <- fppolys %>% dplyr::filter(status %in% c("Approved", "Construction", "Planned", "Production" ))
fppolys <- fppolys %>% dplyr::filter(!grepl("OFTO", name)) # exclude cable polygons
proj.laea <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs'
fppolys <-  st_transform(fppolys, crs = proj.laea)
fppolys <-  fppolys %>% dplyr::filter(name == "SeaGreen Alpha") # filter for one OWF for now <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< REMOVE/REPLACE
# Union of polygons to avoid double counting within overlapping polygons
fppolys <- st_union(fppolys) # combine overlapping elements
fppolys <- st_sf(geometry = st_cast(fppolys, "POLYGON"))  # return to sfc
# Example BLKI UD for testing code
file_udmap <- system.file("extdata", paste0("FAME_UD_standardised_", "BLKI", ".tif"), package = "spmapper")
udmap <- terra::rast(file_udmap)
terra::crs(udmap) <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0'
spmapplot(udmap,fppolys) # this colour scale wont work for raster as this is UD values, much less than prey map values, just used to test
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_cogu <- spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_razo <- spmapper(spname = "Razorbill", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
(spmapplot(out_kitt$prey_cons_map, fppolys) + ggtitle("Kittiwake")) +
(spmapplot(out_cogu$prey_cons_map, fppolys) + ggtitle("Guillemot")) +
(spmapplot(out_razo$prey_cons_map, fppolys) + ggtitle("Razorbill")) +
patchwork::plot_layout(ncol = 2)
# SPACING ISSUE
par(mfrow=c(2,2))
par(mar=c(4, 4, 2, 1))  # bottom, left, top, right
hist(out_kitt$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Kittiwake")
lines(rep(out_kitt$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_cogu$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Guillemot")
lines(rep(out_cogu$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_razo$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Razorbill")
lines(rep(out_razo$allbirds_prey_est,2),c(0,10000),lwd=2)
par(mfrow=c(1,1))
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
library(pkgdown)
pkgdown::build_site()
# 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
Sys.setenv(GITHUB_PAT = "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")
# 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
Sys.setenv(GITHUB_PAT = "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")
# test package installation from github
devtools::install_github("NERC-CEH/spmapper-Rpkg")
# test package installation from github
devtools::install_github("NERC-CEH/spmapper-pkg")
library(pkgdown)
pkgdown::build_site()
# use pkgdown to add logos (it will find them in pkgdown/favicon)
build_favicons(pkg = ".", overwrite = FALSE)
library(pkgdown)
# use pkgdown to add logos (it will find them in pkgdown/favicon)
build_favicons(pkg = ".", overwrite = FALSE)
seabird <- system.file("extdata", package = "spmapper")
Seabird_energetics_pars_spmapper <- read.csv(seabird)
## load Seabird_energetics_pars_spmapper.csv
library(spmapper)
seabird <- system.file("extdata", package = "spmapper")
Seabird_energetics_pars_spmapper <- read.csv(seabird)
# get full path
seabird_energetics_path <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
# Read the CSV file
Seabird_energetics_pars_spmapper <- read.csv(seabird_energetics_path)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
# get full path
seabird_energetics_path <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
# Read the CSV file
Seabird_energetics_pars_spmapper <- read.csv(seabird_energetics_path)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
library(pkgdown)
pkgdown::build_site()
library(pkgdown)
pkgdown::build_site()
pkgdown::clean_site(force = TRUE)
# remove former contens in docs:
pkgdown::build_site()
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contens in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
