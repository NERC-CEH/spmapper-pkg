#####################################
# final checks of package
devtools::check()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
# check that the function works by running ?spmapper for example
?spmapper
?fn.tot.prey
#####################################
# final checks of package
devtools::check()
#####################################
# final checks of package
devtools::check()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package
devtools::check()
# if pkg is corrupted unlink it
unlink("C:/Users/clacap/AppData/Local/R/win-library/4.4/ecowings", recursive = TRUE, force = TRUE)
# if pkg is corrupted unlink it
unlink("C:/Users/clacap/AppData/Local/R/win-library/4.4/spmapper", recursive = TRUE, force = TRUE)
# or manually remove it by browsing to it
# clean
devtools::clean_dll()
# if ready, install the package in your R system library
devtools::install()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package
devtools::check()
# then load it
library(spmapper)
#####################################
# final checks of package
devtools::check()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
# check that the function works by running ?spmapper for example
?spmapper
?fn.tot.prey
#####################################
# final checks of package
devtools::check()
# if pkg is corrupted unlink it
unlink("C:/Users/clacap/AppData/Local/R/win-library/4.4/spmapper", recursive = TRUE, force = TRUE)
# or manually remove it by browsing to it
# clean
devtools::clean_dll()
#####################################
# final checks of package
devtools::check()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
rlang::last_trace()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package - go to unlink and remove dll around line 125 if you have
# corruption errors
devtools::check()
library(rnaturalearth)
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
# after changes
devtools::build()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# after changes
devtools::build()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
## load Seabird_energetics_pars_spmapper.csv ##
###############################################
# get full path
seabird_energetics_path <- system.file("extdata",
"Seabird_energetics_pars_spmapper.csv",
package = "spmapper")
# Read the CSV file
Seabird_energetics_pars_spmapper <- read.csv(seabird_energetics_path)
usethis::use_data(Seabird_energetics_pars_spmapper, overwrite = TRUE)
str(Seabird_energetics_pars_spmapper)
## load RAZO.sampled.params.csv ##
###############################################
# get full path
RAZO_sampled_path <- system.file("extdata",
"RAZO.sampled.params.csv",
package = "spmapper")
# Read the CSV file
RAZO_sampled_spmapper <- read.csv(RAZO_sampled_path)
usethis::use_data(RAZO_sampled_spmapper, overwrite = TRUE)
## prepare `FAME_UD_standardised_RAZO.tif` dataset raster
FAME_UD_standardised_RAZO_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_RAZO.tif",
package = "spmapper"))
FAME_UD_standardised_RAZO_m <- terra::as.matrix(FAME_UD_standardised_RAZO_r)
terra::plot(FAME_UD_standardised_RAZO_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_RAZO_r)
ncols <- ncol(FAME_UD_standardised_RAZO_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_RAZO_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_RAZO_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_RAZO_r)
FAME_UD_standardised_RAZO_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_RAZO <- list(matrix = FAME_UD_standardised_RAZO_m,
metadata = FAME_UD_standardised_RAZO_metadata)
usethis::use_data(FAME_UD_standardised_RAZO, overwrite = TRUE)
str(FAME_UD_standardised_RAZO)
## prepare `FAME_UD_standardised_COGU.tif` dataset raster
FAME_UD_standardised_COGU_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_COGU.tif",
package = "spmapper"))
FAME_UD_standardised_COGU_m <- terra::as.matrix(FAME_UD_standardised_COGU_r)
terra::plot(FAME_UD_standardised_COGU_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_COGU_r)
ncols <- ncol(FAME_UD_standardised_COGU_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_COGU_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_COGU_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_COGU_r)
FAME_UD_standardised_COGU_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_COGU <- list(matrix = FAME_UD_standardised_COGU_m,
metadata = FAME_UD_standardised_COGU_metadata)
usethis::use_data(FAME_UD_standardised_COGU, overwrite = TRUE)
## prepare `FAME_UD_standardised_BLKI.tif` dataset raster
FAME_UD_standardised_BLKI_r <- terra::rast(system.file("extdata",
"FAME_UD_standardised_BLKI.tif",
package = "spmapper"))
FAME_UD_standardised_BLKI_m <- terra::as.matrix(FAME_UD_standardised_BLKI_r)
terra::plot(FAME_UD_standardised_BLKI_r)
#save the metadata
nrows <- nrow(FAME_UD_standardised_BLKI_r)
ncols <- ncol(FAME_UD_standardised_BLKI_r)
xmin <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[1])
xmax <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[2])
ymin <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[3])
ymax <- as.vector(terra::ext(FAME_UD_standardised_BLKI_r)[4])
# assign and stores crs
terra::crs(FAME_UD_standardised_BLKI_r) <- "EPSG:4326"
crs <- terra::crs(FAME_UD_standardised_BLKI_r)
FAME_UD_standardised_BLKI_metadata <- list(
n_rows = nrows,
n_cols = ncols,
x_min = xmin,
x_max = xmax,
y_min = ymin,
y_max = ymax,
crs = crs
)
FAME_UD_standardised_BLKI <- list(matrix = FAME_UD_standardised_BLKI_m,
metadata = FAME_UD_standardised_BLKI_metadata)
usethis::use_data(FAME_UD_standardised_BLKI, overwrite = TRUE)
## load fame_population_ests.csv ##
###############################################
# get full path
fame_population_path <- system.file("extdata",
"fame_population_ests.csv",
package = "spmapper")
# Read the CSV file
fame_population_spmapper <- read.csv(fame_population_path)
usethis::use_data(fame_population_spmapper, overwrite = TRUE)
## load COGU.sampled.params.csv ##
###############################################
# get full path
COGU_sampled_path <- system.file("extdata",
"COGU.sampled.params.csv",
package = "spmapper")
# Read the CSV file
COGU_sampled_spmapper <- read.csv(COGU_sampled_path)
usethis::use_data(COGU_sampled_spmapper, overwrite = TRUE)
## load BLKI.sampled.params.csv ##
###############################################
# get full path
BLKI_sampled_path <- system.file("extdata",
"BLKI.sampled.params.csv",
package = "spmapper")
# Read the CSV file
BLKI_sampled_spmapper <- read.csv(BLKI_sampled_path)
usethis::use_data(BLKI_sampled_spmapper, overwrite = TRUE)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# then load it
library(spmapper)
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# after changes
devtools::build()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# after changes
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
library(spmapper)
library(terra) ## note: needed in 'fpudoverlap'
library(sf)
library(knitr)
library(rnaturalearth)
library(rnaturalearthhires)
library(viridis)
library(ggplot2)
library(patchwork)
tooldir <- system.file("extdata", package = "spmapper")
system.file("R", "functions_preymodel.R", package = "spmapper")
system.file("R", "functions_spmapper.R", package = "spmapper")
system.file("R", "functions_fpudoverlap.R", package = "spmapper")
system.file("R", "functions_spmapplot.R", package = "spmapper")
# Example polygons
# UK offshore windfarms (Sourced via EMODNet)
fppolys <- sf::st_read(system.file("demo/UK_OWF_polygons_by_status", package = "spmapper"))
fppolys <- fppolys %>% dplyr::filter(country == "United Kingdom")
fppolys <- fppolys %>% dplyr::filter(status %in% c("Approved", "Construction", "Planned", "Production" ))
fppolys <- fppolys %>% dplyr::filter(!grepl("OFTO", name)) # exclude cable polygons
proj.laea <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84  +units=m +no_defs'
fppolys <-  st_transform(fppolys, crs = proj.laea)
# Union of polygons to avoid double counting within overlapping polygons
# We should instead add warning to test if user's polygons overlap <<<<<<<<<<<<<<<<<<<<<<<<
fppolys <- st_union(fppolys) # combine overlapping elements
fppolys <- st_sf(geometry = st_cast(fppolys, "POLYGON"))  # return to sfc
# TEMPORARY - Example BLKI UD for testing code    TO BE REMOVED <<<<<<<<<<<<<<<<<<<<<<<<
file_udmap <- system.file("extdata", paste0("FAME_UD_standardised_", "BLKI", ".tif"), package = "spmapper")
udmap <- terra::rast(file_udmap)
terra::crs(udmap) <- '+proj=laea +lat_0=-7.947 +lon_0=-14.30 +x_0=0 +y_0=0 +ellps=WGS84 +datum=WGS84 +units=m +no_defs +towgs84=0,0,0'
spmapplot(udmap, fppolys) + theme(legend.position = "none") # map colour scale wont work for UD values (used as dummy)
out_kitt <- spmapper(spname = "Kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_cogu <- spmapper(spname = "Guillemot", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
out_razo <- spmapper(spname = "Razorbill", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
## Plot a single species map
# spmapplot(out_razo$prey_cons_map, fppolys) + ggtitle("Razorbill")
# Plot all species map # REMOVE and simply show how to plot one as above?? <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
(spmapplot(out_kitt$prey_cons_map, fppolys) + ggtitle("Kittiwake")) +
(spmapplot(out_cogu$prey_cons_map, fppolys) + ggtitle("Guillemot")) +
(spmapplot(out_razo$prey_cons_map, fppolys) + ggtitle("Razorbill")) +
patchwork::plot_layout(ncol = 1)
par(mfrow=c(2,2))
hist(out_kitt$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Kittiwake")
lines(rep(out_kitt$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_cogu$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Guillemot")
lines(rep(out_cogu$allbirds_prey_est,2),c(0,10000),lwd=2)
hist(out_razo$allbirds_prey_sim, breaks=50, col=gray(0.6), main="Razorbill")
lines(rep(out_razo$allbirds_prey_est,2),c(0,10000),lwd=2)
tab_kitt <- data.frame(
Species = "Kittiwake",
Estimate = out_kitt$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_kitt$allbirds_prey_sim, 0.025)),
# Sim_Mean = mean(out_kitt$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_kitt$allbirds_prey_sim, 0.975)))
tab_cogu <- data.frame(
Species = "Guillemot",
Estimate = out_cogu$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_cogu$allbirds_prey_sim, 0.025)),
# Sim_Mean = mean(out_cogu$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_cogu$allbirds_prey_sim, 0.975)))
tab_razo <- data.frame(
Species = "Razorbill",
Estimate = out_razo$allbirds_prey_est,
Sim_CI_Lower = as.numeric(quantile(out_razo$allbirds_prey_sim, 0.025)),
# Sim_Mean = mean(out_razo$allbirds_prey_sim),
Sim_CI_Upper = as.numeric(quantile(out_razo$allbirds_prey_sim, 0.975)))
kable(rbind(tab_kitt, tab_cogu, tab_razo))
spmapper(spname = "kittiwake", fppolys = fppolys, popscen = "baseline", tooldir = tooldir)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# after changes
devtools::build()
load("N:/ecowings/data/BLKI_sampled_spmapper.rda")
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
#####################################
# final checks of package - go to unlink and remove dll around line 125 if you have
# corruption errors
devtools::check()
#t roughly simulates what happens when a package is installed and loaded with library
devtools::load_all()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# run devtools & roxygen
library(devtools)
# devtools::install_github("klutometis/roxygen")
library(roxygen2)
# once the documentation is completed within each function file e.g.
# @title @params, etc
# run the below to generate .rd files for each function in the main folder
# You will get one .Rd file for each function in your R package.
devtools::document()
library(pkgdown)
# remove former contents in docs:
pkgdown::clean_site(force = TRUE)
pkgdown::build_site()
# after changes
devtools::build()
# if ready, install the package in your R system library
devtools::install()
# then load it
library(spmapper)
